name: "Test Release"

variables:
  GIT_REPOSITORY: my-awesome-repo
  GIT_TOKEN: super-secret-token

plugins:
  - name: "git"
    url: "file://D:/wolfware/moonlit/Wolfware.Moonlit/Wolfware.Moonlit.Plugins.Git/bin/Debug/net9.0/Wolfware.Moonlit.Plugins.Git.dll"
    config:
      repository: $(vars:GIT_REPOSITORY)
      token: $(vars:GIT_TOKEN)
  - name: "conventional-commits"
    url: "file://D:/wolfware/moonlit/Wolfware.Moonlit/Wolfware.Moonlit.Plugins.ConventionalCommits/bin/Debug/net9.0/Wolfware.Moonlit.Plugins.ConventionalCommits.dll"
  - name: "github"
    url: "file://D:/wolfware/moonlit/Wolfware.Moonlit/Wolfware.Moonlit.Plugins.GitHub/bin/Debug/net9.0/Wolfware.Moonlit.Plugins.Github.dll"
    config:
      repository: $(GIT:REPOSITORY)
      token: $(GIT:TOKEN)

stages:
  analyze:
    - name: gitHistory
      run: git.collect-commit-history
      config:
        tagPrefix: "v"
    - name: calculateVersion
      run: conventional-commits.calculate-version
      config:
        commits: $(output:gitHistory:history)

  release:
    - name: gatTag
      run: git.tag
      config:
        format: "v{tagValue}"
        value: $(output:calculateVersion:version)
    - name: createRelease
      run: github.create-release
      config:
        context: "test"
        tag: $(output:calculateVersion:version)
        title: "Release $(output:calculateVersion:version)"
        body: $(output:createChangelogs:changelog)
        draft: false
        prerelease: false

#  notify:
#    - name: "github.create-issue"
#      config:
#        context: "test"
#        title: "Release @{{analyze.version}}"
#        body: "A new release has been created with version @{{analyze.version}}.\n\nChangelog:\n@{analyze.changelog}"
#        labels: [ "release", "notification" ]
#        assignees: [ "@{GIT_REPOSITORY}" ]