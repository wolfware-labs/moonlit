name: "Test Release"

plugins:
  - name: "git"
    url: "file://D:/wolfware/moonlit/Wolfware.Moonlit/Wolfware.Moonlit.Plugins.Git/bin/Debug/net9.0/Wolfware.Moonlit.Plugins.Git.dll"
    config:
      username: $(env:GIT_USERNAME)
      password: $(env:GIT_PAT)
  - name: "semantic-release"
    url: "file://D:/wolfware/moonlit/Wolfware.Moonlit/Wolfware.Moonlit.Plugins.SemanticRelease/bin/Debug/net9.0/Wolfware.Moonlit.Plugins.SemanticRelease.dll"
  - name: "github"
    url: "file://D:/wolfware/moonlit/Wolfware.Moonlit/Wolfware.Moonlit.Plugins.GitHub/bin/Debug/net9.0/Wolfware.Moonlit.Plugins.Github.dll"
    config:
      token: $(env:GITHUB_TOKEN)

stages:
  analyze:
    - name: gitInfo
      run: git.info
    - name: commitHistory
      run: git.commits
      config:
        tagPrefix: "v"
    - name: calculateVersion
      run: semantic-release.calculate-version
      config:
        branch: $(output:gitInfo:branch)
        commits: $(output:commitHistory:commits)
        prereleaseMappings:
          main: next
    - name: generateChangelogs
      run: semantic-release.changelogs
      config:
        commits: $(output:commitHistory:commits)
        openAiKey: $(OPENAI_API_KEY)

  release:
    - name: createRelease
      run: github.create-release
      config:
        name: "Release $(output:calculateVersion:version)"
        tag: $(output:calculateVersion:nextVersion)
        body: $(output:createChangelogs:changelog)
        draft: true
        prerelease: $(output:calculateVersion:isPrerelease)

#  notify:
#    - name: "github.create-issue"
#      config:
#        context: "test"
#        title: "Release @{{analyze.version}}"
#        body: "A new release has been created with version @{{analyze.version}}.\n\nChangelog:\n@{analyze.changelog}"
#        labels: [ "release", "notification" ]
#        assignees: [ "@{GIT_REPOSITORY}" ]