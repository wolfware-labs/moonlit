name: "Test Release"

plugins:
  - name: "gh"
    url: "file://D:/wolfware/moonlit/Wolfware.Moonlit/Wolfware.Moonlit.Plugins.GitHub/bin/Debug/net9.0/Wolfware.Moonlit.Plugins.Github.dll"
    config:
      token: $(GITHUB_TOKEN)
  - name: "sr"
    url: "file://D:/wolfware/moonlit/Wolfware.Moonlit/Wolfware.Moonlit.Plugins.SemanticRelease/bin/Debug/net9.0/Wolfware.Moonlit.Plugins.SemanticRelease.dll"

stages:
  analyze:
    - name: repo
      run: gh.info
    - name: commitHistory
      run: gh.commits
      config:
        tagPrefix: "v"
    - name: calculateVersion
      run: sr.calculate-version
      config:
        branch: $(output:repo:branch)
        baseVersion: $(output:commitHistory:latestTag)
        commits: $(output:commitHistory:commits)
        prereleaseMappings:
          main: next
    - name: generateChangelog
      run: sr.generate-changelog
      config:
        commits: $(output:commitHistory:commits)
        openAiKey: $(OPENAI_API_KEY)

  release:
    - name: createRelease
      run: gh.create-release
      config:
        name: "Release $(output:calculateVersion:nextVersion)"
        tag: $(output:calculateVersion:nextVersion)
        body: $(output:generateChangelog:markdown)
        draft: true
        prerelease: $(output:calculateVersion:isPrerelease)

#  notify:
#    - name: "github.create-issue"
#      config:
#        context: "test"
#        title: "Release @{{analyze.version}}"
#        body: "A new release has been created with version @{{analyze.version}}.\n\nChangelog:\n@{analyze.changelog}"
#        labels: [ "release", "notification" ]
#        assignees: [ "@{GIT_REPOSITORY}" ]