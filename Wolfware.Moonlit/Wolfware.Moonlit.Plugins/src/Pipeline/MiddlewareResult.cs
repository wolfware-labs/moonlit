using JetBrains.Annotations;

namespace Wolfware.Moonlit.Plugins.Pipeline;

/// Represents the outcome of a pipeline operation, encapsulating success, failure, and warning details.
[PublicAPI]
public sealed record MiddlewareResult
{
  /// Indicates whether the pipeline operation completed successfully.
  /// A value of `true` signifies that the operation succeeded without errors,
  /// whereas `false` indicates that the operation failed.
  public bool IsSuccessful { get; init; }

  /// Contains details about the error that occurred during the pipeline operation.
  /// When the pipeline operation fails, this property provides a descriptive message
  /// explaining the reason for the failure. If the operation is successful, this
  /// property will typically be null or empty.
  public string? ErrorMessage { get; init; }

  /// Contains the data produced by middleware during the execution of the pipeline.
  /// This property provides access to the output generated by the pipeline's middleware components.
  /// It encapsulates a collection of key-value pairs that can store results or intermediate data.
  public MiddlewareOutput Output { get; init; } = new();

  /// Contains a collection of warning messages generated during the pipeline operation.
  /// These messages typically provide additional insights or non-critical issues that occurred
  /// while executing the pipeline but did not prevent the operation from succeeding.
  public List<string> Warnings { get; init; } = [];

  /// Creates a successful pipeline result and allows customization of the output.
  /// <param name="setOutput">An action to set or modify the output of the pipeline result.</param>
  /// <returns>
  /// A new instance of PipelineResult indicating a successful operation.
  /// </returns>
  public static MiddlewareResult Success(Action<MiddlewareOutput>? setOutput = null)
  {
    var result = new MiddlewareResult {IsSuccessful = true};
    setOutput?.Invoke(result.Output);
    return result;
  }

  /// <summary>
  /// Creates a successful pipeline result with the specified output dictionary.
  /// </summary>
  /// <param name="output">A dictionary containing key-value pairs to initialize the pipeline output.</param>
  /// <returns>
  /// A new instance of MiddlewareResult indicating a successful operation with the provided output data.
  /// </returns>
  public static MiddlewareResult Success(IReadOnlyDictionary<string, object?> output)
  {
    return new MiddlewareResult {IsSuccessful = true, Output = new MiddlewareOutput(output)};
  }

  /// Creates a failed pipeline result with the specified error message.
  /// <param name="errorMessage">
  /// A string representing the error message for the failed operation.
  /// </param>
  /// <returns>
  /// A new instance of PipelineResult indicating a failed operation with the provided error message.
  /// </returns>
  public static MiddlewareResult Failure(string errorMessage) =>
    new() {IsSuccessful = false, ErrorMessage = errorMessage};

  /// Creates a pipeline result with a warning and allows customization of the output.
  /// <param name="warning">A string representing the warning message for the pipeline result.</param>
  /// <param name="setOutput">An action to set or modify the output of the pipeline result.</param>
  /// <returns>
  /// A new instance of PipelineResult indicating a successful operation with the provided warning message.
  /// </returns>
  public static MiddlewareResult Warning(string warning, Action<MiddlewareOutput>? setOutput = null)
  {
    var result = new MiddlewareResult {IsSuccessful = true, Warnings = [warning]};
    setOutput?.Invoke(result.Output);
    return result;
  }
}
